/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.aprioricafe.gui.apriori;

import com.aprioricafe.entities.Menu;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aldo
 */
public class ResultDlg extends javax.swing.JDialog {
    private double minimumSupport;
    private double minimumConfidence;
    private List<Menu> selectedMenus;
    private List<MenuInSalesInvoice> listMenuInSalesInvoice ;
    List<C1Row> L1 = new ArrayList<>();
    List<C2Row> L2 = new ArrayList<>();
    List<C3Row> L3 = new ArrayList<>();
    List<ConfidenceRow> confidences = new ArrayList<>();
    int totalTransactions = 0;
    long startTime = 0;
    long endTime = 0;
    long estimatedTime = 0;
    /**
     * Creates new form ResultDlg
     */
    public ResultDlg() {
        initComponents();
        setModal(true);
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblL1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblL2 = new javax.swing.JTable();
        btnConfidence = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Hasil Analisis Apriori");

        lblStatus.setText("waktu estimasi pencarian kombinasi adalah %d, dengan jumlah data yg diproses adalah %d data dan minimum support adalah %d%%");

        jLabel2.setText("L1");

        tblL1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblL1);

        jLabel3.setText("L2");

        tblL2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblL2);

        btnConfidence.setText("Aturan Asosiasi");
        btnConfidence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfidenceActionPerformed(evt);
            }
        });

        jLabel4.setText("Perbarui Aturan Asosiasi");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStatus)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(btnConfidence)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblStatus)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfidence)
                    .addComponent(jLabel4))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfidenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfidenceActionPerformed
        
        minimumConfidence = MinimumConfidenceParamDlg.showModal(null);
        if(minimumConfidence>0){
            if(confidences.size()>0){               
                AssociationResultDlg.showModal(minimumConfidence, confidences);
            }else{
                JOptionPane.showMessageDialog(null, "hasil perhitungan confidence kosong");        
            }
        }else{
            JOptionPane.showMessageDialog(null, "Masukkan menu dan nilai minimum confidence");    
        }
    }//GEN-LAST:event_btnConfidenceActionPerformed

    public static void showModal(double minimumSupport, List<Menu> selectedMenus, List<MenuInSalesInvoice> listMenuInSalesInvoice ) {
        
        ResultDlg dialog = new ResultDlg();
        dialog.minimumSupport = minimumSupport;
        dialog.selectedMenus = selectedMenus;
        dialog.listMenuInSalesInvoice = listMenuInSalesInvoice;
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.analize();
        dialog.loadData();
        dialog.setVisible(true);
        dialog.toFront();
        dialog.requestFocus();
        //System.exit(0);
    }
    
    private void analize(){
        totalTransactions = listMenuInSalesInvoice.size();
        L1.clear();
        L2.clear();
        Map<Long, Menu> menuDictionary = new HashMap<>();
        startTime = System.nanoTime();
        //Iterasi-1 dilakukan untuk membentuk kandidat 1-Iitemset (C1) dari data transaksi tersebut dan cari jumlah support-nya.                
        for(Menu menu: this.selectedMenus){
            menuDictionary.put(menu.getId(), menu);
            
            //support menux = (Jumlah Transaksi Mengandung menux / total trans) *100%
            int jumtransmenux = 0;
            for(MenuInSalesInvoice misi: listMenuInSalesInvoice){
                if(misi.getMenuIDs().contains(menu.getId())){
                    jumtransmenux++;
                }
            }
            double supportmenux = (double)jumtransmenux / totalTransactions;
            System.out.println("telx");
            System.out.println(supportmenux);
            supportmenux = supportmenux *100;
            System.out.println(supportmenux);
            //Nilai minimum support yang telah ditentukan sebelumnya adalah 8%, jadi item yang nilai support-nya dibawah 8% akan dieliminasi. Large-itemset 1 yang terbentuk adalah:
            if(supportmenux>=minimumSupport){
                C1Row row = new C1Row();
                row.setMenu(menu);
                row.setNumberOfTransactions((int)jumtransmenux);
                row.setSupport(supportmenux);
                L1.add(row);
            }
        }
        
        //Iterasi-2 dilakukan proses cross item L1 untuk membentuk kandidat C2 (memiliki dua itemset) setelah itu cari support-nya
        int n = L1.size();
        if(n<2){
            JOptionPane.showMessageDialog(null, "largeItemset1 kurang, cuman "+n);
            return;
        }
        
        List<Long> menuIDs = new ArrayList<>();
        for(int i=0;i<n;i++){
            var item1 = L1.get(i);
            menuIDs.add(item1.getMenu().getId());
        }
        CombinationGenerator<Long> generator2 = new CombinationGenerator<>();
        List<List<Long>> combinations2 = generator2.generateCombinations(menuIDs,2);

        for (List<Long> combo : combinations2) {
            System.out.println(combo);
            var menuID1 = combo.get(0);
            var menuID2 = combo.get(1);
            
            //support menux = (Jumlah Transaksi Mengandung menu1 dan menu2 / total trans) *100%
            int jumtransmenux = 0;
            for(MenuInSalesInvoice misi: listMenuInSalesInvoice){
                var ids =misi.getMenuIDs();
                
                if(ids.contains(menuID1) || ids.contains(menuID2)){
                    jumtransmenux++;
                }
            }
            double supportmenux = (double)jumtransmenux / totalTransactions;
            supportmenux = supportmenux *100;
            if(supportmenux>=minimumSupport){
                C2Row row = new C2Row();
                row.setMenu1(menuDictionary.get(menuID1));
                row.setMenu2(menuDictionary.get(menuID2));
                row.setNumberOfTransactions(jumtransmenux);
                row.setSupport(supportmenux);
                L2.add(row);
            }
        }
             

        //Pada iterasi-3 dilakukan proses cross item L2 untuk membetuk kandidat C3 (memiliki 3 itemset).
        n = L2.size();
        if(n<3){
            JOptionPane.showMessageDialog(null, "largeItemset2 kurang, cuman "+n);
            return;
        }
        menuIDs.clear();
        
        menuIDs = new ArrayList<>();
        for(int i=0;i<n;i++){
            var item1 = L2.get(i);
            if(!menuIDs.contains(item1.getMenu1().getId())){
                menuIDs.add(item1.getMenu1().getId());
            }
            
            if(!menuIDs.contains(item1.getMenu2().getId())){
                menuIDs.add(item1.getMenu2().getId());
            }
        }
        CombinationGenerator<Long> generator3 = new CombinationGenerator<>();
        List<List<Long>> combinations3 = generator3.generateCombinations(menuIDs,3);

        for (List<Long> combo : combinations3) {
            System.out.println(combo);
            var menuID1 = combo.get(0);
            var menuID2 = combo.get(1);
            var menuID3 = combo.get(1);
            
            //support menux = (Jumlah Transaksi Mengandung menu1 dan menu2 dan menu3 / total trans) *100%
            int jumtransmenux = 0;
            for(MenuInSalesInvoice misi: listMenuInSalesInvoice){
                var ids =misi.getMenuIDs();
                
                if(ids.contains(menuID1) || ids.contains(menuID2) || ids.contains(menuID3)){
                    jumtransmenux++;
                }
            }
            double supportmenux = (double)jumtransmenux / totalTransactions;
            supportmenux = supportmenux *100;
            if(supportmenux>=minimumSupport){
                C3Row row = new C3Row();
                row.setMenu1(menuDictionary.get(menuID1));
                row.setMenu2(menuDictionary.get(menuID2));
                row.setMenu3(menuDictionary.get(menuID3));
                row.setNumberOfTransactions(jumtransmenux);
                row.setSupport(supportmenux);
                L3.add(row);
            }
        }
        
        //calculate confidence for L2
        confidences.clear();
        for(C2Row row: L2){
            //confidence =  support yang mengandung (kentang goreng, fanta float) / support Kentang Goreng *100
            ConfidenceRow cr = new ConfidenceRow();
            
            var antecedent = row.getMenu1();
            cr.setAntecedent(antecedent);
            
            List<Menu> consequent = new ArrayList<>();
            consequent.add(row.getMenu2());
            cr.setConsequent(consequent);
            
            //find support of menu1
            double support = 0.0;
            for(C1Row row1: L1){
                if(row1.getMenu().getId().equals(antecedent.getId())){
                    support = row1.getSupport();
                    break;
                }
            }
            double confidence = 0.0;
            if(support>0.0){
                confidence = row.getSupport() / support;
            }
            cr.setSupportItem(support);
            cr.setSupportAntecedent(row.getSupport());
            cr.setConfidence(confidence);
            cr.setLevel("L2");
            confidences.add(cr);
        }
        
        //calculate confidence for L3
        for(C3Row row: L3){
            //confidence =  support yang mengandung (kentang goreng, fanta float) / support Kentang Goreng *100
            ConfidenceRow cr = new ConfidenceRow();
            
            var antecedent = row.getMenu1();
            cr.setAntecedent(antecedent);
            
            List<Menu> consequent = new ArrayList<>();
            consequent.add(row.getMenu2());
            consequent.add(row.getMenu3());
            cr.setConsequent(consequent);
            
            //find support of menu1
            double support = 0.0;
            for(C1Row row1: L1){
                if(row1.getMenu().getId().equals(antecedent.getId())){
                    support = row1.getSupport();
                    break;
                }
            }
            double confidence = 0.0;
            if(support>0.0){
                confidence = row.getSupport() / support;                
            }
            cr.setSupportItem(support);
            cr.setSupportAntecedent(row.getSupport());
            cr.setConfidence(confidence);
            cr.setLevel("L3");
            confidences.add(cr);
        }
        endTime = System.nanoTime();
        estimatedTime = endTime - startTime;
    }
    private void loadData(){
        DefaultTableModel tableModel1 = new DefaultTableModel();
        tableModel1.addColumn("No");
        tableModel1.addColumn("Transaksi Penjualan");
        tableModel1.addColumn("Jumlah Transaksi");
        tableModel1.addColumn("Persentase");
        int no = 1;
        for (C1Row c : L1) {
            
            Vector row = new Vector();
            row.add(no);
            row.add(c.getMenu().getName());
            row.add(c.getNumberOfTransactions());
            row.add(String.format( "%.2f %%", c.getSupport() ));
            tableModel1.addRow(row);
            no++;
        }
        tblL1.setModel(tableModel1);
        
        DefaultTableModel tableModel2 = new DefaultTableModel();
        tableModel2.addColumn("No");
        tableModel2.addColumn("Transaksi Penjualan");
        tableModel2.addColumn("Jumlah Transaksi");
        tableModel2.addColumn("Persentase");
        no = 1;
        for (C2Row c : L2) {
            
            Vector row = new Vector();
            row.add(no);
            row.add(c.getMenu1().getName()+", "+c.getMenu2().getName());
            row.add(c.getNumberOfTransactions());
            row.add(String.format( "%.2f %%", c.getSupport() ));
            tableModel2.addRow(row);
            no++;
        }
        tblL2.setModel(tableModel2);
        String stat = String.format("waktu estimasi pencarian kombinasi adalah %d detik, dengan jumlah data yg diproses adalah %d data dan minimum support adalah %.2f %%", 
                    TimeUnit.SECONDS.convert(estimatedTime,TimeUnit.NANOSECONDS), totalTransactions,this.minimumSupport );
        lblStatus.setText(stat);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfidence;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTable tblL1;
    private javax.swing.JTable tblL2;
    // End of variables declaration//GEN-END:variables
}
