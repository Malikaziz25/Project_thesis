/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.aprioricafe.gui.apriori;

import com.aldoapp.swingboot.BeanProvider;
import com.aprioricafe.entities.Menu;
import com.aprioricafe.entities.SalesInvoice;
import com.aprioricafe.entities.SalesInvoiceItem;
import com.aprioricafe.repositories.MenuRepository;
import com.aprioricafe.repositories.SalesInvoiceItemRepository;
import com.aprioricafe.repositories.SalesInvoiceRepository;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.springframework.beans.factory.annotation.Autowired;

/**
 *
 * @author aldo
 */
public class PreprocessDataDlg extends javax.swing.JDialog {
    @Autowired
    SalesInvoiceRepository salesInvoiceRepository;
    
    @Autowired
    SalesInvoiceItemRepository salesInvoiceItemRepository;
    
    @Autowired
    MenuRepository menuRepository;
    
    private List<SalesInvoice> salesInvoices;
    private double minimumSupport;
    List<Menu> selectedMenus = new ArrayList<>();//list menu yg ada di semua transactions, unique
    int totalTransactions = 0;
    List<MenuInSalesInvoice> listMenuInSalesInvoice = new ArrayList<>(); //list sales in voice dan menu id di setiap invoice
    
    /**
     * Creates new form AnalizeDlg
     */
    public PreprocessDataDlg() {
        BeanProvider.autowire(this); //use someRepository somewhere after this line.
        initComponents();
        setModal(true);
        Locale locale = new Locale("in", "ID");

        startDate.setLocale(locale);
        startDate.setDateToToday();
        
        endDate.setLocale(locale);
        endDate.setDateToToday();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnUpdatePreprocessTable = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnUpdatePattern = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        startDate = new com.github.lgooddatepicker.components.DatePicker();
        jLabel6 = new javax.swing.JLabel();
        endDate = new com.github.lgooddatepicker.components.DatePicker();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Preproses Data");

        jLabel1.setText("Perbarui tabel preproses data");

        btnUpdatePreprocessTable.setText("Perbarui");
        btnUpdatePreprocessTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePreprocessTableActionPerformed(evt);
            }
        });

        jLabel2.setText("Perbarui pola kombinasi apriori");

        btnUpdatePattern.setText("Perbarui");
        btnUpdatePattern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePatternActionPerformed(evt);
            }
        });

        jLabel3.setText("Rekomendasi paket menu");

        jButton1.setText("Paket Menu");

        jLabel4.setText("Tabel Preproses Data");

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbl);

        jLabel5.setText("Data mulai tanggal");

        jLabel6.setText("Sampai tanggal");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addComponent(btnUpdatePattern)
                                    .addComponent(btnUpdatePreprocessTable)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnUpdatePreprocessTable))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btnUpdatePattern))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButton1))
                .addGap(30, 30, 30)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdatePatternActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePatternActionPerformed
        minimumSupport = MinimumSupportParamDlg.showModal(null);
        if(minimumSupport>0){
            if(selectedMenus.size()>0){
                ResultDlg.showModal(minimumSupport, selectedMenus, listMenuInSalesInvoice);
            }else{
                JOptionPane.showMessageDialog(null, "menu kosong");    
            }
        }else{
            JOptionPane.showMessageDialog(null, "Masukkan menu dan nilai minimum support");    
        }
    }//GEN-LAST:event_btnUpdatePatternActionPerformed

    private void btnUpdatePreprocessTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePreprocessTableActionPerformed
        
        salesInvoices = salesInvoiceRepository.findAllByInvoiceDateBetween(startDate.getDate(), endDate.getDate());
        if(salesInvoices==null){
            totalTransactions = 0;
        }else{
            totalTransactions = salesInvoices.size();
        }
        loadData();
    }//GEN-LAST:event_btnUpdatePreprocessTableActionPerformed

    public static void showModal(String[] args) {
        
        PreprocessDataDlg dialog = new PreprocessDataDlg();
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
        dialog.toFront();
        dialog.requestFocus();
        //System.exit(0);
    }
    
    private void loadData(){
        DefaultTableModel tableModel = new DefaultTableModel();
        Locale locale = new Locale("in", "ID");
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd MMMM yyyy").withLocale(locale);
        
        tableModel.addColumn("Nota");
        tableModel.addColumn("Itemset");
        tableModel.addColumn("Tanggal");
        
        selectedMenus.clear();
        List<Long> ids = new ArrayList<>();
        listMenuInSalesInvoice.clear();
        
        //extract data
        
        if(salesInvoices!=null){
            for (SalesInvoice detail : salesInvoices) {
                MenuInSalesInvoice menuInSalesInvoice = new MenuInSalesInvoice();
                menuInSalesInvoice.setSalesInvoiceId(detail.getId());
                    
                Vector row = new Vector();

                String formattedDate = detail.getDate().format(formatter);
                row.add(detail.getInvoiceNo());
                List<String> itemset = new ArrayList<>();
                
                List<Long> menuIDs = new ArrayList<>();
                
                //List<SalesInvoiceItem> invItems = detail.getInvoiceItems();
                List<SalesInvoiceItem> invItems = salesInvoiceItemRepository.findAllByInvoiceId(detail.getId());
                for(SalesInvoiceItem item: invItems){
                    
                    var menu = item.getMenu();
                    
                    if(menu.isIsCombination()){
                        //List<Menu> combmenus = menu.getCombinations();
                        var menucomb = menuRepository.findById(menu.getId());
                        List<Menu> combmenus = menucomb.get().getCombinations();
                        for(Menu menux: combmenus){
                            itemset.add(menux.getName());    
                            
                            if(!menuIDs.contains(menux.getId())){
                                menuIDs.add(menux.getId());
                            }
                            
                            if(!ids.contains(menux.getId())){
                                selectedMenus.add(menux);    
                                ids.add(menux.getId());
                            }
                            
                        }
                    }else{
                        itemset.add(menu.getName());
                        
                        if(!menuIDs.contains(menu.getId())){
                            menuIDs.add(menu.getId());
                        }
                        
                        if(!ids.contains(menu.getId())){
                            selectedMenus.add(menu);    
                            ids.add(menu.getId());
                        }
                    }
                }
                
                row.add(String.join(", ", itemset));    
                row.add(formattedDate);
                
                menuInSalesInvoice.setMenuIDs(menuIDs);
                listMenuInSalesInvoice.add(menuInSalesInvoice);
                
                tableModel.addRow(row);

            }
        }
        
        tbl.setModel(tableModel);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdatePattern;
    private javax.swing.JButton btnUpdatePreprocessTable;
    private com.github.lgooddatepicker.components.DatePicker endDate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private com.github.lgooddatepicker.components.DatePicker startDate;
    private javax.swing.JTable tbl;
    // End of variables declaration//GEN-END:variables
}
